#!/usr/bin/env python3
"""
Script pour t√©l√©charger et concat√©ner des vid√©os
"""

import os
import sys
import subprocess
import tempfile
import argparse
from urllib.parse import urlparse
import requests
from pathlib import Path

def download_video(url, output_path):
    """T√©l√©charge une vid√©o depuis une URL"""
    try:
        print(f"T√©l√©chargement de {url}...")
        response = requests.get(url, stream=True)
        response.raise_for_status()
        
        with open(output_path, 'wb') as f:
            for chunk in response.iter_content(chunk_size=8192):
                f.write(chunk)
        
        print(f"‚úì T√©l√©charg√©: {output_path}")
        return True
    except Exception as e:
        print(f"‚úó Erreur lors du t√©l√©chargement de {url}: {e}")
        return False

def get_video_info(video_path):
    """R√©cup√®re les informations d'une vid√©o avec ffprobe"""
    try:
        cmd = [
            'ffprobe', '-v', 'quiet', '-print_format', 'json', '-show_format', '-show_streams', video_path
        ]
        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
        return True
    except subprocess.CalledProcessError:
        return False

def concatenate_videos(video_paths, output_path):
    """Concat√®ne plusieurs vid√©os avec ffmpeg"""
    
    with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False) as f:
        concat_file = f.name
        for video_path in video_paths:
            # √âchappe les caract√®res sp√©ciaux pour ffmpeg
            escaped_path = video_path.replace("'", "'\\''")
            f.write(f"file '{escaped_path}'\n")
    
    try:
        print("Concat√©nation des vid√©os...")
        cmd = [
            'ffmpeg', '-f', 'concat', '-safe', '0', '-i', concat_file,
            '-c', 'copy', '-y', output_path
        ]
        
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print(f"‚úì Vid√©o finale cr√©√©e: {output_path}")
            return True
        else:
            print(f"‚úó Erreur ffmpeg: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚úó Erreur lors de la concat√©nation: {e}")
        return False
    finally:
        # Nettoie le fichier temporaire
        os.unlink(concat_file)

def main():
    parser = argparse.ArgumentParser(description='T√©l√©charge et concat√®ne des vid√©os')
    parser.add_argument('urls', nargs='+', help='URLs des vid√©os √† t√©l√©charger')
    parser.add_argument('-o', '--output', default='video_finale.mp4', 
                       help='Nom du fichier de sortie (d√©faut: video_finale.mp4)')
    parser.add_argument('--keep-temp', action='store_true', 
                       help='Garde les fichiers temporaires t√©l√©charg√©s')
    
    args = parser.parse_args()
    
    # V√©rifie que ffmpeg est install√©
    try:
        subprocess.run(['ffmpeg', '-version'], capture_output=True, check=True)
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚úó Erreur: ffmpeg n'est pas install√© ou accessible")
        print("Installez ffmpeg: https://ffmpeg.org/download.html")
        sys.exit(1)
    
    # Cr√©e un dossier temporaire pour les t√©l√©chargements
    temp_dir = tempfile.mkdtemp(prefix='video_concat_')
    downloaded_videos = []
    
    try:
        # T√©l√©charge chaque vid√©o
        for i, url in enumerate(args.urls):
            # G√©n√®re un nom de fichier temporaire
            parsed_url = urlparse(url)
            filename = os.path.basename(parsed_url.path) or f"video_{i+1}.mp4"
            
            # Assure-toi que le fichier a une extension vid√©o
            if not any(filename.lower().endswith(ext) for ext in ['.mp4', '.avi', '.mkv', '.mov', '.wmv']):
                filename += '.mp4'
            
            temp_path = os.path.join(temp_dir, filename)
            
            if download_video(url, temp_path):
                # V√©rifie que le fichier est une vid√©o valide
                if get_video_info(temp_path):
                    downloaded_videos.append(temp_path)
                else:
                    print(f"‚ö† Le fichier {temp_path} ne semble pas √™tre une vid√©o valide")
            else:
                print(f"‚ö† Impossible de t√©l√©charger {url}")
        
        if not downloaded_videos:
            print("‚úó Aucune vid√©o n'a pu √™tre t√©l√©charg√©e")
            sys.exit(1)
        
        if len(downloaded_videos) < 2:
            print("‚ö† Une seule vid√©o t√©l√©charg√©e, copie vers la sortie...")
            import shutil
            shutil.copy2(downloaded_videos[0], args.output)
        else:
            # Concat√®ne les vid√©os
            if not concatenate_videos(downloaded_videos, args.output):
                sys.exit(1)
        
        print(f"üéâ Termin√©! Vid√©o finale: {args.output}")
        
    finally:
        # Nettoie les fichiers temporaires
        if not args.keep_temp:
            import shutil
            shutil.rmtree(temp_dir)
        else:
            print(f"Fichiers temporaires conserv√©s dans: {temp_dir}")

if __name__ == "__main__":
    main()