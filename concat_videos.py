#!/usr/bin/env python3
"""
Script pour t√©l√©charger et concat√©ner des vid√©os
Refactored for web API usage with compression support
"""

import os
import sys
import subprocess
import tempfile
import argparse
from urllib.parse import urlparse
import requests
from pathlib import Path
import time
import shutil

def download_video(url, output_path):
    """T√©l√©charge une vid√©o depuis une URL"""
    try:
        print(f"T√©l√©chargement de {url}...")
        response = requests.get(url, stream=True)
        response.raise_for_status()
        
        with open(output_path, 'wb') as f:
            for chunk in response.iter_content(chunk_size=8192):
                f.write(chunk)
        
        print(f"‚úì T√©l√©charg√©: {output_path}")
        return True
    except Exception as e:
        print(f"‚úó Erreur lors du t√©l√©chargement de {url}: {e}")
        return False

def get_video_info(video_path):
    """R√©cup√®re les informations d'une vid√©o avec ffprobe"""
    try:
        cmd = [
            'ffprobe', '-v', 'quiet', '-print_format', 'json', '-show_format', '-show_streams', video_path
        ]
        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
        return True
    except subprocess.CalledProcessError:
        return False

def get_file_size_mb(file_path):
    """Retourne la taille du fichier en MB"""
    try:
        size_bytes = os.path.getsize(file_path)
        size_mb = size_bytes / (1024 * 1024)
        return size_mb
    except OSError:
        return 0

def compress_video(input_path, target_size_mb=100, max_attempts=4):
    """
    Compresse une vid√©o en utilisant une approche it√©rative pour atteindre la taille cible
    tout en pr√©servant la meilleure qualit√© possible
    """
    print(f"üé¨ D√©marrage compression: {os.path.basename(input_path)}")
    
    # V√©rification des outils
    if not check_ffmpeg_available():
        print("‚ùå ffmpeg/ffprobe non disponible")
        return False
    
    # Taille originale
    original_size = os.path.getsize(input_path)
    original_mb = original_size / (1024 * 1024)
    print(f"üìä Taille originale: {original_mb:.1f} MB")
    
    if original_mb <= target_size_mb:
        print(f"‚úÖ Fichier d√©j√† sous {target_size_mb}MB")
        return True
    
    # Obtenir la dur√©e de la vid√©o
    duration = get_video_duration(input_path)
    if not duration:
        print("‚ùå Impossible d'obtenir la dur√©e de la vid√©o")
        return False
    
    print(f"‚è±Ô∏è  Dur√©e: {duration:.1f} secondes")
    
    # Param√®tres de compression progressive
    compression_attempts = [
        {"crf": 23, "preset": "medium", "name": "Qualit√© √©lev√©e"},
        {"crf": 25, "preset": "medium", "name": "Qualit√© moyenne-√©lev√©e"},
        {"crf": 27, "preset": "fast", "name": "Qualit√© moyenne"},
        {"crf": 30, "preset": "fast", "name": "Qualit√© acceptable"}
    ]
    
    temp_output = None
    
    try:
        for attempt, params in enumerate(compression_attempts, 1):
            print(f"\nüîÑ Tentative {attempt}/{len(compression_attempts)}: {params['name']}")
            
            # Calcul du bitrate cible pour cette tentative
            target_size_bits = target_size_mb * 8 * 1024 * 1024
            # R√©duction progressive: 95%, 90%, 85%, 80% de la taille cible
            size_factor = 1.0 - (attempt * 0.05)
            adjusted_target_bits = target_size_bits * size_factor
            target_bitrate = int((adjusted_target_bits / duration) * 0.85)  # 85% pour vid√©o, 15% pour audio
            
            print(f"üéØ Bitrate cible: {target_bitrate} bps (CRF: {params['crf']})")
            
            # Fichier temporaire pour cette tentative
            temp_output = tempfile.mktemp(suffix='_compressed.mp4')
            
            # Commande ffmpeg optimis√©e
            cmd = [
                'ffmpeg', '-i', input_path,
                '-c:v', 'libx264',
                '-preset', params['preset'],
                '-crf', str(params['crf']),
                '-b:v', str(target_bitrate),
                '-maxrate', str(int(target_bitrate * 1.2)),
                '-bufsize', str(int(target_bitrate * 2)),
                '-c:a', 'aac',
                '-b:a', '96k',  # Audio de meilleure qualit√©
                '-threads', '0',
                '-movflags', '+faststart',  # Optimisation pour streaming
                '-y', temp_output
            ]
            
            # Ex√©cution avec timeout
            print(f"‚öôÔ∏è  Compression en cours...")
            start_time = time.time()
            
            try:
                result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)
                elapsed = time.time() - start_time
                
                if result.returncode != 0:
                    print(f"‚ùå Erreur ffmpeg: {result.stderr}")
                    continue
                
                # V√©rifier la taille du r√©sultat
                if os.path.exists(temp_output):
                    compressed_size = os.path.getsize(temp_output)
                    compressed_mb = compressed_size / (1024 * 1024)
                    
                    print(f"üìè R√©sultat: {compressed_mb:.1f} MB (temps: {elapsed:.1f}s)")
                    
                    # Succ√®s si on est dans la plage acceptable
                    if compressed_mb <= target_size_mb:
                        # Remplacer le fichier original
                        shutil.move(temp_output, input_path)
                        
                        ratio = compressed_size / original_size
                        print(f"‚úÖ Compression r√©ussie!")
                        print(f"üìä Taille finale: {compressed_mb:.1f} MB")
                        print(f"üìâ R√©duction: {((1-ratio)*100):.1f}%")
                        print(f"üéØ Qualit√©: {params['name']}")
                        
                        return True
                    else:
                        print(f"‚ö†Ô∏è  Encore trop gros ({compressed_mb:.1f} MB > {target_size_mb} MB)")
                        # Nettoyer le fichier temporaire
                        if os.path.exists(temp_output):
                            os.unlink(temp_output)
                else:
                    print("‚ùå Fichier de sortie non cr√©√©")
                    
            except subprocess.TimeoutExpired:
                print(f"‚è∞ Timeout apr√®s 5 minutes")
                continue
            except Exception as e:
                print(f"‚ùå Erreur: {e}")
                continue
        
        # Si toutes les tentatives ont √©chou√©
        print(f"‚ùå Impossible de compresser sous {target_size_mb}MB apr√®s {len(compression_attempts)} tentatives")
        return False
        
    finally:
        # Nettoyer les fichiers temporaires
        if temp_output and os.path.exists(temp_output):
            try:
                os.unlink(temp_output)
            except:
                pass

def concatenate_videos(video_paths, output_path):
    """Concat√®ne plusieurs vid√©os avec ffmpeg"""
    
    with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False) as f:
        concat_file = f.name
        for video_path in video_paths:
            # √âchappe les caract√®res sp√©ciaux pour ffmpeg
            escaped_path = video_path.replace("'", "'\\''")
            f.write(f"file '{escaped_path}'\n")
    
    try:
        print("Concat√©nation des vid√©os...")
        cmd = [
            'ffmpeg', '-f', 'concat', '-safe', '0', '-i', concat_file,
            '-c', 'copy', '-y', output_path
        ]
        
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print(f"‚úì Vid√©o finale cr√©√©e: {output_path}")
            return True
        else:
            print(f"‚úó Erreur ffmpeg: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚úó Erreur lors de la concat√©nation: {e}")
        return False
    finally:
        # Nettoie le fichier temporaire
        os.unlink(concat_file)

def check_ffmpeg():
    """V√©rifie que ffmpeg est install√©"""
    try:
        subprocess.run(['ffmpeg', '-version'], capture_output=True, check=True)
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        return False

def check_ffmpeg_available():
    """V√©rifie si ffmpeg et ffprobe sont disponibles"""
    try:
        subprocess.run(['ffmpeg', '-version'], capture_output=True, check=True)
        subprocess.run(['ffprobe', '-version'], capture_output=True, check=True)
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        return False

def get_video_duration(video_path):
    """Obtient la dur√©e de la vid√©o en secondes"""
    try:
        cmd = [
            'ffprobe', '-v', 'quiet', '-show_entries', 'format=duration',
            '-of', 'csv=p=0', video_path
        ]
        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
        duration_str = result.stdout.strip()
        
        if duration_str:
            return float(duration_str)
    except (subprocess.CalledProcessError, ValueError):
        pass
    return None

def process_videos_from_urls(urls, output_path, keep_temp=False, max_size_mb=100):
    """
    Process videos from URLs - main logic extracted for API usage
    Returns (success: bool, error_message: str)
    """
    if not check_ffmpeg():
        return False, "ffmpeg n'est pas install√© ou accessible"
    
    # Cr√©e un dossier temporaire pour les t√©l√©chargements
    temp_dir = tempfile.mkdtemp(prefix='video_concat_')
    downloaded_videos = []
    
    try:
        # T√©l√©charge chaque vid√©o
        for i, url in enumerate(urls):
            # G√©n√®re un nom de fichier temporaire
            parsed_url = urlparse(url)
            filename = os.path.basename(parsed_url.path) or f"video_{i+1}.mp4"
            
            # Assure-toi que le fichier a une extension vid√©o
            if not any(filename.lower().endswith(ext) for ext in ['.mp4', '.avi', '.mkv', '.mov', '.wmv']):
                filename += '.mp4'
            
            temp_path = os.path.join(temp_dir, filename)
            
            if download_video(url, temp_path):
                # V√©rifie que le fichier est une vid√©o valide
                if get_video_info(temp_path):
                    downloaded_videos.append(temp_path)
                else:
                    return False, f"Le fichier {url} ne semble pas √™tre une vid√©o valide"
            else:
                return False, f"Impossible de t√©l√©charger {url}"
        
        if not downloaded_videos:
            return False, "Aucune vid√©o n'a pu √™tre t√©l√©charg√©e"
        
        # V√©rifie la taille finale et compresse si n√©cessaire
        if len(downloaded_videos) > 1:
            if concatenate_videos(downloaded_videos, output_path):
                file_size = get_file_size_mb(output_path)
                print(f"‚úì Vid√©o concat√©n√©e: {file_size:.1f}MB")
                
                # Compression si n√©cessaire
                if file_size > max_size_mb:
                    print(f"‚ö† Fichier trop volumineux ({file_size:.1f}MB), compression en cours...")
                    
                    if compress_video(output_path, max_size_mb):
                        file_size = get_file_size_mb(output_path)  # Update file size after compression
                        print(f"‚úì Vid√©o compress√©e avec succ√®s: {file_size:.1f}MB")
                    else:
                        print(f"‚ö† Compression √©chou√©e, fichier reste √† {file_size:.1f}MB")
            else:
                print("‚úó Erreur lors de la concat√©nation")
                return None, []
        else:
            # Un seul fichier, copie directement
            print("‚ö† Une seule vid√©o t√©l√©charg√©e, copie vers la sortie...")
            import shutil
            shutil.copy2(downloaded_videos[0], output_path)
            file_size = get_file_size_mb(output_path)
            print(f"‚úì Fichier copi√©: {file_size:.1f}MB")
            
            # Compression si n√©cessaire
            if file_size > max_size_mb:
                print(f"‚ö† Fichier unique trop volumineux ({file_size:.1f}MB), compression...")
                if compress_video(output_path, max_size_mb):
                    file_size = get_file_size_mb(output_path)  # Update file size after compression
                    print(f"‚úì Fichier unique compress√©: {file_size:.1f}MB")
        
        return True, f"Vid√©o cr√©√©e avec succ√®s ({file_size:.1f}MB)"
        
    finally:
        # Nettoie les fichiers temporaires
        if not keep_temp:
            import shutil
            shutil.rmtree(temp_dir)

def main():
    """CLI entry point"""
    parser = argparse.ArgumentParser(description='T√©l√©charge et concat√®ne des vid√©os')
    parser.add_argument('urls', nargs='+', help='URLs des vid√©os √† t√©l√©charger')
    parser.add_argument('-o', '--output', default='video_finale.mp4', 
                       help='Nom du fichier de sortie (d√©faut: video_finale.mp4)')
    parser.add_argument('--keep-temp', action='store_true', 
                       help='Garde les fichiers temporaires t√©l√©charg√©s')
    parser.add_argument('--max-size', type=int, default=100,
                       help='Taille maximale en MB avant compression (d√©faut: 100)')
    
    args = parser.parse_args()
    
    success, message = process_videos_from_urls(args.urls, args.output, args.keep_temp, args.max_size)
    
    if success:
        print(f"üéâ Termin√©! Vid√©o finale: {args.output}")
        print(f"üìä {message}")
    else:
        print(f"‚úó Erreur: {message}")
        sys.exit(1)

if __name__ == "__main__":
    main() 